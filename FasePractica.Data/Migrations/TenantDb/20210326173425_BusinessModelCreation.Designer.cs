// <auto-generated />
using System;
using FasePractica.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace FasePractica.Data.Migrations.TenantDb
{
    [DbContext(typeof(TenantDbContext))]
    [Migration("20210326173425_BusinessModelCreation")]
    partial class BusinessModelCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("FasePractica.Data.Models.Carrera", b =>
                {
                    b.Property<int>("CarreraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.HasKey("CarreraId");

                    b.ToTable("Carreras");
                });

            modelBuilder.Entity("FasePractica.Data.Models.Conversacion", b =>
                {
                    b.Property<int>("ConversacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("RealizadoEl")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ConversacionId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Conversaciones");
                });

            modelBuilder.Entity("FasePractica.Data.Models.Documento", b =>
                {
                    b.Property<int>("DocumentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AlmacenadoEn")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FechaFinal")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("FirmadoEl")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.HasKey("DocumentoId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Documentos");
                });

            modelBuilder.Entity("FasePractica.Data.Models.Empresa", b =>
                {
                    b.Property<int>("EmpresaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("EstudiantesActuales")
                        .HasColumnType("integer");

                    b.Property<int>("EstudiantesConvenio")
                        .HasColumnType("integer");

                    b.Property<string>("Latitud")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Longitud")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Ruc")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("SectorProductivo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int>("TipoEmpresa")
                        .HasColumnType("integer");

                    b.Property<int>("TipoPersona")
                        .HasColumnType("integer");

                    b.Property<int>("TutorId")
                        .HasColumnType("integer");

                    b.HasKey("EmpresaId");

                    b.HasIndex("TutorId");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("FasePractica.Data.Models.Nivel", b =>
                {
                    b.Property<int>("NivelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CarreraId")
                        .HasColumnType("integer");

                    b.Property<int>("HorasPractica")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.Property<int>("Numero")
                        .HasColumnType("integer");

                    b.HasKey("NivelId");

                    b.HasIndex("CarreraId");

                    b.ToTable("Niveles");
                });

            modelBuilder.Entity("FasePractica.Data.Models.Nota", b =>
                {
                    b.Property<int>("NotaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Aprueba")
                        .HasColumnType("boolean");

                    b.Property<float>("Calificacion")
                        .HasColumnType("real");

                    b.Property<int>("EstudianteId")
                        .HasColumnType("integer");

                    b.Property<int>("NivelId")
                        .HasColumnType("integer");

                    b.Property<int>("ProyectoId")
                        .HasColumnType("integer");

                    b.HasKey("NotaId");

                    b.HasIndex("EstudianteId");

                    b.HasIndex("NivelId");

                    b.HasIndex("ProyectoId");

                    b.ToTable("Notas");
                });

            modelBuilder.Entity("FasePractica.Data.Models.Persona", b =>
                {
                    b.Property<int>("PersonaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CorreoInstitucional")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CorreoPersonal")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("TipoPersona")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PersonaId");

                    b.ToTable("Personas");

                    b.HasDiscriminator<string>("TipoPersona").HasValue("Persona");
                });

            modelBuilder.Entity("FasePractica.Data.Models.Proyecto", b =>
                {
                    b.Property<int>("ProyectoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AlmacenadoEn")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Beneficios")
                        .HasColumnType("text");

                    b.Property<string>("Comentario")
                        .HasColumnType("text");

                    b.Property<int>("ContactoId")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<string>("Indicador")
                        .HasColumnType("text");

                    b.Property<string>("Meta")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Objetivo")
                        .HasColumnType("text");

                    b.Property<DateTime>("RealizadoEl")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SemestreId")
                        .HasColumnType("integer");

                    b.Property<string>("SituacionActual")
                        .HasColumnType("text");

                    b.Property<string>("Tecnologia")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("TutorId")
                        .HasColumnType("integer");

                    b.HasKey("ProyectoId");

                    b.HasIndex("ContactoId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("SemestreId");

                    b.HasIndex("TutorId");

                    b.ToTable("Proyectos");
                });

            modelBuilder.Entity("FasePractica.Data.Models.Semestre", b =>
                {
                    b.Property<int>("SemestreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("SemestreId");

                    b.ToTable("Semestres");
                });

            modelBuilder.Entity("FasePractica.Data.Models.Contacto", b =>
                {
                    b.HasBaseType("FasePractica.Data.Models.Persona");

                    b.Property<string>("CargoEmpresa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<string>("TituloProfesional")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Personas");

                    b.HasDiscriminator().HasValue("Contacto");
                });

            modelBuilder.Entity("FasePractica.Data.Models.Estudiante", b =>
                {
                    b.HasBaseType("FasePractica.Data.Models.Persona");

                    b.Property<int>("CarreraId")
                        .HasColumnType("integer");

                    b.Property<string>("CodigoIgnug")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasIndex("CarreraId");

                    b.ToTable("Personas");

                    b.HasDiscriminator().HasValue("Estudiante");
                });

            modelBuilder.Entity("FasePractica.Data.Models.Tutor", b =>
                {
                    b.HasBaseType("FasePractica.Data.Models.Persona");

                    b.Property<string>("CodigoIgnug")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("Tutor_CodigoIgnug");

                    b.Property<string>("TituloProfesional")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Tutor_TituloProfesional");

                    b.ToTable("Personas");

                    b.HasDiscriminator().HasValue("Tutor");
                });

            modelBuilder.Entity("FasePractica.Data.Models.Conversacion", b =>
                {
                    b.HasOne("FasePractica.Data.Models.Empresa", "Empresa")
                        .WithMany("Conversaciones")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("FasePractica.Data.Models.Documento", b =>
                {
                    b.HasOne("FasePractica.Data.Models.Empresa", "Empresa")
                        .WithMany("Documentos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("FasePractica.Data.Models.Empresa", b =>
                {
                    b.HasOne("FasePractica.Data.Models.Tutor", "Tutor")
                        .WithMany("Empresas")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("FasePractica.Data.Models.Nivel", b =>
                {
                    b.HasOne("FasePractica.Data.Models.Carrera", "Carrera")
                        .WithMany("Niveles")
                        .HasForeignKey("CarreraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrera");
                });

            modelBuilder.Entity("FasePractica.Data.Models.Nota", b =>
                {
                    b.HasOne("FasePractica.Data.Models.Estudiante", "Estudiante")
                        .WithMany("Notas")
                        .HasForeignKey("EstudianteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FasePractica.Data.Models.Nivel", "Nivel")
                        .WithMany("Notas")
                        .HasForeignKey("NivelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FasePractica.Data.Models.Proyecto", "Proyecto")
                        .WithMany("Notas")
                        .HasForeignKey("ProyectoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estudiante");

                    b.Navigation("Nivel");

                    b.Navigation("Proyecto");
                });

            modelBuilder.Entity("FasePractica.Data.Models.Proyecto", b =>
                {
                    b.HasOne("FasePractica.Data.Models.Contacto", "TutorEmpresarial")
                        .WithMany()
                        .HasForeignKey("ContactoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FasePractica.Data.Models.Empresa", "Empresa")
                        .WithMany("Proyectos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FasePractica.Data.Models.Semestre", "Semestre")
                        .WithMany("Proyectos")
                        .HasForeignKey("SemestreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FasePractica.Data.Models.Tutor", "TutorAcademico")
                        .WithMany("Proyectos")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Semestre");

                    b.Navigation("TutorAcademico");

                    b.Navigation("TutorEmpresarial");
                });

            modelBuilder.Entity("FasePractica.Data.Models.Contacto", b =>
                {
                    b.HasOne("FasePractica.Data.Models.Empresa", "Empresa")
                        .WithMany("Contactos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("FasePractica.Data.Models.Estudiante", b =>
                {
                    b.HasOne("FasePractica.Data.Models.Carrera", "Carrera")
                        .WithMany("Estudiantes")
                        .HasForeignKey("CarreraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrera");
                });

            modelBuilder.Entity("FasePractica.Data.Models.Carrera", b =>
                {
                    b.Navigation("Estudiantes");

                    b.Navigation("Niveles");
                });

            modelBuilder.Entity("FasePractica.Data.Models.Empresa", b =>
                {
                    b.Navigation("Contactos");

                    b.Navigation("Conversaciones");

                    b.Navigation("Documentos");

                    b.Navigation("Proyectos");
                });

            modelBuilder.Entity("FasePractica.Data.Models.Nivel", b =>
                {
                    b.Navigation("Notas");
                });

            modelBuilder.Entity("FasePractica.Data.Models.Proyecto", b =>
                {
                    b.Navigation("Notas");
                });

            modelBuilder.Entity("FasePractica.Data.Models.Semestre", b =>
                {
                    b.Navigation("Proyectos");
                });

            modelBuilder.Entity("FasePractica.Data.Models.Estudiante", b =>
                {
                    b.Navigation("Notas");
                });

            modelBuilder.Entity("FasePractica.Data.Models.Tutor", b =>
                {
                    b.Navigation("Empresas");

                    b.Navigation("Proyectos");
                });
#pragma warning restore 612, 618
        }
    }
}
